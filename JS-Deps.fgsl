#pragma fg scratch(atomic_uint in_degree_max)
#pragma fg scratch(atomic_uint out_degree_max)
#pragma fg scratch(atomic_uint xmin)
#pragma fg scratch(atomic_uint xmax)
#pragma fg scratch(atomic_uint ymin)
#pragma fg scratch(atomic_uint ymax)

#pragma fg scratch(uint in_degree[N])
#pragma fg scratch(uint out_degree[N])

#pragma fg attribute(float X[N])
#pragma fg attribute(float Y[N])
#pragma fg attribute(uint Date[N])
#pragma fg attribute(uint Devs[N])
#pragma fg attribute(uint Vuln[N])

#define NOV_09_2010 1289278800
#define MAR_22_2016 1458619200


#pragma fg shader(positional)
float x = X[fg_NodeIndex];
float y = Y[fg_NodeIndex];
float date = float(Date[fg_NodeIndex] - NOV_09_2010) / float(MAR_22_2016 - NOV_09_2010);

fg_NodePosition = vec3(x, y, -date);


#pragma fg shader(relational)
uint od = 1 + atomicAdd(out_degree[fg_SourceIndex], 1);
atomicCounterMax(out_degree_max, od);

uint id = 1 + atomicAdd(in_degree[fg_TargetIndex], 1);
atomicCounterMax(in_degree_max, id);

#pragma fg shader(appearance)
if ( ((gl_PrimitiveID + 100) % 1000 ) < 0) {
    discard;
}
fg_FragColor = vec4(0.1);
fg_FragColor.r = float(Devs[fg_SourceIndex] > 3);
fg_FragColor.g = float(Vuln[fg_SourceIndex] > 0);
