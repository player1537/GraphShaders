{% if not preprocessed %}
#define node(...) node(__VA_ARGS__, out vec2 fg_NodePosition, out float fg_NodeDepth)
#define fg_mean(x) (x)
#define fg_min(x) (x)
#define fg_max(x) (x)
{% else %}
#version 300 es
precision mediump float;
{% endif %}

{{ source|safe }}

{% if preprocessed %}
in float aNode1, aNode2, aNode3, aNode4, aNode5, aNode6, aNode7, aNode8;
uniform float uNodeMin1, uNodeMin2, uNodeMin3, uNodeMin4, uNodeMin5, uNodeMin6, uNodeMin7, uNodeMin8;
uniform float uNodeMax1, uNodeMax2, uNodeMax3, uNodeMax4, uNodeMax5, uNodeMax6, uNodeMax7, uNodeMax8;

uniform float uTranslateX, uTranslateY, uScale;

uniform vec3 uCat6[6];

{% for param in out_params -%}
{{ StorageQualifier(param.storage).name|lower }} {{ param.base_type.name }} {{ param.name }};
{% endfor %}
out vec2 fg_FragCoord;
out float fg_FragDepth;

void main() {
    node(
        {%- for param in in_params -%}
        {%- if not loop.first %}, {% endif %}
        (aNode{{ loop.index }} - uNodeMin{{ loop.index }}) / (uNodeMax{{ loop.index }} - uNodeMin{{ loop.index }})
        {%- endfor -%}
        {% for param in out_params -%},
        {{ param.name -}}
        {% endfor %}
    );

    fg_NodePosition = uScale * fg_NodePosition.xy + vec2(uTranslateX, uTranslateY);

    gl_Position = vec4(2.0 * fg_NodePosition.xy - 1.0, fg_NodeDepth, 1.0);
    fg_FragCoord = fg_NodePosition;
    fg_FragDepth = fg_NodeDepth;
}
{% endif %}
