{% if not preprocessed %}
#define edge(...) edge(__VA_ARGS__, in vec2 fg_FragCoord, in float fg_FragDepth, in vec4 fg_EdgeData, out vec4 fg_FragColor, out float fg_EdgeMutate, out float fg_Disregard)
{% else %}
#version 460 core
precision mediump float;

// DO NOT USE A VEC 3 IN THESE. CHECK: https://www.khronos.org/opengl/wiki/Interface_Block_(GLSL)
// Memory Layout Section for more details! Specifically, std140 v std430 and how _VEC 3 IS STILL
// TREATED THE SAME_.
// This should be somewhat tolerant to the user program? I have no clue how to make this flexible...
struct EdgeData {
    vec4 color;
};

layout(std430, binding = 0) readonly buffer GlobalEdgeData {
    EdgeData global_edge_data[];
};

layout(std430, binding = 1) readonly buffer PrimitiveLookasideBuffer {
    int global_indices[];
};

{% endif %}

{{ source|safe }}

{% if preprocessed %}
uniform float uNodeMin1, uNodeMin2, uNodeMin3, uNodeMin4, uNodeMin5, uNodeMin6, uNodeMin7, uNodeMin8;
uniform float uNodeMax1, uNodeMax2, uNodeMax3, uNodeMax4, uNodeMax5, uNodeMax6, uNodeMax7, uNodeMax8;

uniform float uTranslateX, uTranslateY, uScale;

{% for param in in_params -%}
{{ StorageQualifier(param.storage).name|lower }} {{ param.base_type.name }} {{ param.name }};
{% endfor %}

{% for param in out_params -%}
{{ StorageQualifier(param.storage).name|lower }} {{ param.base_type.name }} {{ param.name }};
{% endfor %}

void main() {
    vec4 fg_EdgeData = global_edge_data[global_indices[gl_PrimitiveID] + 1].color;
    float fg_EdgeMutate = 0.0;
    float fg_Disregard = 0.0;
    edge(
        {%- for param in in_params -%}
        {%- if not loop.first %}, {% endif %}
        {{ param.name }}
        {%- endfor -%}
        {% for param in out_params -%},
        {{ param.name -}}
        {% endfor %}
    );

    if (fg_Disregard >= 1.0) {
        discard;
    }

    gl_FragDepth = fg_EdgeMutate;
}
{% endif %}
